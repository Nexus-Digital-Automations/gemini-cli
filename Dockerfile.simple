FROM docker.io/library/node:20-slim

ARG SANDBOX_NAME="gemini-cli-sandbox"
ARG CLI_VERSION_ARG
ENV SANDBOX="$SANDBOX_NAME"
ENV CLI_VERSION=$CLI_VERSION_ARG

# Install minimal set of packages, then clean up
RUN apt-get update && apt-get install -y --no-install-recommends \
  python3 \
  make \
  g++ \
  man-db \
  curl \
  dnsutils \
  less \
  jq \
  bc \
  gh \
  git \
  unzip \
  rsync \
  ripgrep \
  procps \
  psmisc \
  lsof \
  socat \
  ca-certificates \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Set up npm global package folder under /usr/local/share
# Give it to non-root user node, already set up in base image
RUN mkdir -p /usr/local/share/npm-global \
  && chown -R node:node /usr/local/share/npm-global
ENV NPM_CONFIG_PREFIX=/usr/local/share/npm-global
ENV PATH=$PATH:/usr/local/share/npm-global/bin

# Switch to non-root user node
USER node

# Set working directory
WORKDIR /usr/src/app

# Copy all source code
COPY --chown=node:node . .

# Install dependencies but skip broken prepare scripts
RUN npm install --ignore-scripts

# Generate required files only
RUN npm run generate

# Fix package.json files to point to TypeScript source instead of missing dist files
RUN sed -i 's/"main": "dist\/index\.js"/"main": "index.ts"/g' packages/core/package.json && \
    sed -i 's/"main": "dist\/index\.js"/"main": "index.ts"/g' packages/cli/package.json

# Fix ALL ajv package.json files to point to existing files (use dist/ajv.js if it exists, otherwise lib/ajv.js)
RUN find . -name "ajv" -type d -path "*/node_modules/*" -exec sh -c 'if [ -f "$1/package.json" ]; then if [ ! -f "$1/dist/ajv.js" ]; then sed -i "s|\"main\": \"dist/ajv\\.js\"|\"main\": \"lib/ajv.js\"|g" "$1/package.json"; fi; fi' _ {} \;

# Fix mime package.json to point to existing TypeScript source files
RUN find . -name "mime" -type d -path "*/node_modules/*" -exec sh -c 'if [ -f "$1/package.json" ]; then sed -i "s|\"\\.\": \"\\./dist/src/index\\.js\"|\".\": \"./src/index.ts\"|g" "$1/package.json"; sed -i "s|\"main\": \"\\./dist/src/index\\.js\"|\"main\": \"./src/index.ts\"|g" "$1/package.json"; fi' _ {} \;

# Fix fileUtils.ts to use correct mime imports and methods
RUN sed -i "s|import mime from 'mime/lite';|import mime from 'mime';|g" packages/core/src/utils/fileUtils.ts && \
    sed -i "s|mime\\.getType(|mime.lookup(|g" packages/core/src/utils/fileUtils.ts

# Fix ajv dependency resolution by installing compatible versions and clearing npm cache
RUN npm cache clean --force

# Clean reinstall of problematic packages
RUN cd packages/core && rm -rf node_modules/ajv node_modules/json-schema-traverse
RUN cd packages/core && npm install ajv@8.17.1 json-schema-traverse@1.0.0

# Ensure json-schema-traverse is available at root level for global resolution
RUN npm install json-schema-traverse@1.0.0

# Create a simple entrypoint script that runs the CLI in development mode
RUN mkdir -p /home/node/bin && \
    echo '#!/bin/bash' > /home/node/bin/entrypoint.sh && \
    echo 'echo "Gemini CLI Development Container"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "Budget System: ✓ Implemented"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "Progress Tracking: ✓ Implemented"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo ""' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "Available commands:"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  npx tsx packages/cli/index.ts [args] - Start the CLI directly"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  npm run lint - Run linting"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  npm run typecheck - Check TypeScript"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  bash - Enter shell"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo ""' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "Example usage:"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  npx tsx packages/cli/index.ts --help"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo "  npx tsx packages/cli/index.ts budget --help"' >> /home/node/bin/entrypoint.sh && \
    echo 'echo ""' >> /home/node/bin/entrypoint.sh && \
    echo 'if [ "$#" -eq 0 ]; then' >> /home/node/bin/entrypoint.sh && \
    echo '  exec bash' >> /home/node/bin/entrypoint.sh && \
    echo 'else' >> /home/node/bin/entrypoint.sh && \
    echo '  exec "$@"' >> /home/node/bin/entrypoint.sh && \
    echo 'fi' >> /home/node/bin/entrypoint.sh && \
    chmod +x /home/node/bin/entrypoint.sh

# Set up environment for development
ENV NODE_ENV=development

# Default entrypoint
ENTRYPOINT ["/home/node/bin/entrypoint.sh"]
CMD []