{
  "project": "gemini-cli",
  "features": [],
  "metadata": {
    "version": "1.0.0",
    "created": "2025-09-27T04:12:07.921Z",
    "updated": "2025-09-30T17:50:57.403Z",
    "total_features": 0,
    "approval_history": [],
    "initialization_stats": {
      "total_initializations": 0,
      "total_reinitializations": 30,
      "current_day": "2025-09-28",
      "time_buckets": {
        "11:00-15:59": {
          "init": 0,
          "reinit": 0
        },
        "16:00-20:59": {
          "init": 0,
          "reinit": 0
        },
        "21:00-01:59": {
          "init": 0,
          "reinit": 1
        },
        "02:00-06:59": {
          "init": 0,
          "reinit": 0
        },
        "07:00-11:59": {
          "init": 0,
          "reinit": 0
        }
      },
      "daily_history": [
        {
          "date": "2025-09-27",
          "total_init": 0,
          "total_reinit": 22,
          "buckets": {
            "11:00-15:59": {
              "init": 0,
              "reinit": 3
            },
            "16:00-20:59": {
              "init": 0,
              "reinit": 2
            },
            "21:00-01:59": {
              "init": 0,
              "reinit": 4
            },
            "02:00-06:59": {
              "init": 0,
              "reinit": 11
            },
            "07:00-11:59": {
              "init": 0,
              "reinit": 2
            }
          }
        }
      ],
      "last_reset": "2025-09-28T04:17:35.092Z",
      "last_updated": "2025-09-28T04:17:35.093Z"
    }
  },
  "workflow_config": {
    "require_approval": true,
    "auto_reject_timeout_hours": 168,
    "allowed_statuses": ["suggested", "approved", "rejected", "implemented"],
    "required_fields": ["title", "description", "business_value", "category"]
  },
  "agents": {},
  "tasks": [
    {
      "id": "task_1759253608315_91f19b0e19f7",
      "feature_id": null,
      "title": "Implement comprehensive hooks system for Gemini CLI with lifecycle event support",
      "description": "Implement a full-featured hooks system similar to Claude Code that allows users to register custom shell commands/scripts at lifecycle events (PreToolUse, PostToolUse, Notification, Stop). The system should: 1) Support project-level and user-level configuration files, 2) Execute hooks with JSON payload on stdin, 3) Process hook responses on stdout, 4) Support hook matchers for specific tools, 5) Allow hooks to validate, modify, or block tool calls, 6) Include comprehensive error handling, 7) Integrate seamlessly into existing tool execution flow, 8) Include full test coverage and documentation with examples",
      "type": "feature",
      "priority": "high",
      "status": "completed",
      "dependencies": [],
      "estimated_effort": 5,
      "required_capabilities": ["general"],
      "created_at": "2025-09-30T17:33:28.315Z",
      "updated_at": "2025-09-30T17:50:57.403Z",
      "created_by": "manual_creation",
      "verificationGate": {
        "status": "pending",
        "requirements": [],
        "evidence": null,
        "verifiedAt": null,
        "verifiedBy": null
      },
      "metadata": {
        "auto_generated": false
      },
      "progress_percentage": 100,
      "completed_at": "2025-09-30T17:50:57.403Z"
    }
  ],
  "completed_tasks": []
}
